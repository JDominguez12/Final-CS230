This code is a follow-up of the first independent programming project that involved utilizing the binary tree. As mentioned previously, Binary tree has been one of the most interesting concepts that I learned in this class, which is why I dived deep further into the project.

I learned that the binary tree can go even further as to implementing random numbers and being able to use the data given from the random numbers to sort the numbers using an in-order traversal. Struct TreeNode is implemented to create a structure of the binary tree, holding values along with the left and right pointers for child nodes. insertRandom function generates numbers from 1-100 so that it can be inserted into the tree. insert functions then does a recursive call to insert values in the correct position from least to greatest. printInOrder will print the values in order of the binary tree sort. Lastly, the clear function deletes all the nodes. Main.cpp is the file that calls on the functions to implement the sort, as well as generating the numbers and printing the in-order traversal. It can generate any random number that the code specifies, for example, least number can start at 15, and go up to 94.

That is it for the random binary tree program. It is surprising to me that random numbers can be implemented and sorted in a way to organize a in-order traversal in a binary tree. The most challenging part for me was setting up a test file. This was my first time setting up one and I had to use some resources from previous assignments to set one up. Eventually the file worked and was able to pass the tests I setup for this code. I can see this being used for database or data sorting algorithms, which if I decide to get into databases, I can see myself using this algorithm once again.